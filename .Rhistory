install.packages("KernSmooth")
library(KernSmooth)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] <- 0
getwd()
x<-read.csv(file=hw1_data.csv)
x<-read.csv(file="hw1_data.csv")
x[1:10]
x
y<-x$ozone
y<-x$Ozone
sum(is.na(y))
z<-y[!is.na(y)]
mean(z)
y<-x[1]
y<-x[1:6,1:4]
y<- x$O
high_ozone <- y[y>31]
high_ozone <- is.na(y[y>31])
high_ozone <- !is.na(y[y>31])
ozone = x$O
high_ozone <- (!is.na(ozone) & ozone[x>31])
high_ozone <- (!is.na(ozone) & ozone > 31)
cbind(ozone, high_ozone)
temp <- x$T
high_temp <- (!is.na(temp) & temp > 90)
cbind(temp, high_temp)
set <- x[high_ozone & high_temp,]
mean(set$Sol)
x
x[x$Month == 6,]
mean(x[x$Month == 6,]$Temp)
max(x[x$Month == 6,]$Oz)
max(x[x$Month == 5,]$Oz)
max(x[x$Month == 5,]$Ozone)
max(x[x$Month == 5 & !is.na(x$Ozone),]$Ozone)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r}
activity.data <- read.csv("activity.csv")
activity.data$date <- as.Date(activity.data$date)
```
## What is mean total number of steps taken per day?
```{r fig.width=7, fig.height=6}
total.steps.per.day <- aggregate(activity.data$steps, by=list(activity.data$date), FUN=sum, na.rm=TRUE)
hist(total.steps.per.day$x)
```
The mean number of steps per day:
```{r}
mean(total.steps.per.day$x)
```
The median number of steps per day:
```{r}
median(total.steps.per.day$x)
```
## What is the average daily activity pattern?
The interval or intervals with the highest average steps across all days:
```{r}
average.steps.per.interval <- aggregate(activity.data$steps, by=list(activity.data$interval), FUN=mean, na.rm=TRUE)
average.steps.per.interval[average.steps.per.interval$x==max(average.steps.per.interval$x),1]
```
## Imputing missing values
The total number of missing values in the dataset:
```{r}
sum(is.na(activity.data$steps))
```
To fill in these values I will use the median value for that interval. If no values exist for that interval, I will use 0.
```{r}
imputed.activity.data <- activity.data
for (i in (min(activity.data$interval)/5):(max(activity.data$interval)/5)) {
avg <- mean(imputed.activity.data[imputed.activity.data$interval==i*5,"steps"], na.rm=TRUE)
if(is.na(avg)) avg <- 0
imputed.activity.data[is.na(imputed.activity.data$steps) & imputed.activity.data$interval==i*5,"steps"] <- avg
}
```
Creating a histogram to show the number of days by step count:
```{r}
imputed.total.steps.per.day <- aggregate(imputed.activity.data$steps, by=list(activity.data$date), FUN=sum, na.rm=TRUE)
hist(imputed.total.steps.per.day$x)
```
The mean number of steps per day (imputed):
```{r}
mean(imputed.total.steps.per.day$x)
```
The median number of steps per day (imputed):
```{r}
median(imputed.total.steps.per.day$x)
```
As you can see from the figures above, removing NA's resulted in missing values for each day, which lowered the daily figures notably. When we filled in those missing values with average values, the total for each affected day was increased. This increased both the mean and the median values for steps per day.
## Are there differences in activity patterns between weekdays and weekends?
First I need to identify which records are on a weekday and which records are on a weekend.
```{r}
week.segment <- rep("Weekday", each=length(imputed.activity.data$date))
week.segment[weekdays(imputed.activity.data$date)=="Saturday" | weekdays(imputed.activity.data$date)=="Sunday"] <- "Weekend"
imputed.activity.data <- cbind(imputed.activity.data, week.segment)
```
setwd("~/!Documents/Coursera/Reproducible Research/Project 1/RepData_PeerAssessment1")
activity.data <- read.csv("activity.csv")
activity.data$date <- as.Date(activity.data$date)
total.steps.per.day <- aggregate(activity.data$steps, by=list(activity.data$date), FUN=sum, na.rm=TRUE)
hist(total.steps.per.day$x)
mean(total.steps.per.day$x)
median(total.steps.per.day$x)
average.steps.per.interval <- aggregate(activity.data$steps, by=list(activity.data$interval), FUN=mean, na.rm=TRUE)
average.steps.per.interval[average.steps.per.interval$x==max(average.steps.per.interval$x),1]
sum(is.na(activity.data$steps))
imputed.activity.data <- activity.data
for (i in (min(activity.data$interval)/5):(max(activity.data$interval)/5)) {
avg <- mean(imputed.activity.data[imputed.activity.data$interval==i*5,"steps"], na.rm=TRUE)
if(is.na(avg)) avg <- 0
imputed.activity.data[is.na(imputed.activity.data$steps) & imputed.activity.data$interval==i*5,"steps"] <- avg
}
imputed.total.steps.per.day <- aggregate(imputed.activity.data$steps, by=list(activity.data$date), FUN=sum, na.rm=TRUE)
hist(imputed.total.steps.per.day$x)
mean(imputed.total.steps.per.day$x)
median(imputed.total.steps.per.day$x)
week.segment <- rep("Weekday", each=length(imputed.activity.data$date))
week.segment[weekdays(imputed.activity.data$date)=="Saturday" | weekdays(imputed.activity.data$date)=="Sunday"] <- "Weekend"
imputed.activity.data <- cbind(imputed.activity.data, week.segment)
par(mfrow=c(1,2))
plot(imputed.activity.data$interval, imputed.activity.data$steps, ylab="average steps taken", xlab="Interval", title="Steps taken per interval", type="l")
?plot
plot(imputed.activity.data$interval, imputed.activity.data$steps, ylab="average steps taken", xlab="Interval", main="Weekend", type="l")
par(mfrow=c(2,1))
plot(imputed.activity.data$interval, imputed.activity.data$steps, ylab="average steps taken", xlab="Interval", main="Weekend", type="l")
plot(imputed.activity.data$interval, imputed.activity.data$steps, ylab="average steps taken", xlab="Interval", main="Weekend", type="l")
par(mfrow=c(1,1))
plot(imputed.activity.data$interval, imputed.activity.data$steps, ylab="average steps taken", xlab="Interval", main="Weekend", type="l")
plot(imputed.activity.data$interval, mean(imputed.activity.data$steps), ylab="average steps taken", xlab="Interval", main="Weekend", type="l")
plot(imputed.activity.data$interval, mean(imputed.activity.data$steps), ylab="average steps taken", xlab="Interval", main="Weekend", type="l")
plot(max(imputed.activity.data$interval), mean(imputed.activity.data$steps), ylab="average steps taken", xlab="Interval", main="Weekend", type="l")
weekend.steps <- imputed.activity.data[imputed.data.activity$segment=="Weekend"]
weekend.steps <- imputed.activity.data[imputed.activity.data$segment=="Weekend"]
weekend.average.steps.per.interval <- aggregate(weekend.steps$steps, by=list(weekend.steps$interval), FUN=mean, na.rm=TRUE)
weekend.steps <- imputed.activity.data[imputed.activity.data$segment=="Weekend"]
weekend.average.steps.per.interval <- aggregate(weekend.steps$steps, by=list(weekend.steps$interval), FUN=mean, na.rm=TRUE)
weekend.steps <- imputed.activity.data[imputed.activity.data$segment=="Weekend",]
head(imputed.activity.data)
weekend.steps <- imputed.activity.data[imputed.activity.data$week.segment=="Weekend",]
weekend.average.steps.per.interval <- aggregate(weekend.steps$steps, by=list(weekend.steps$interval), FUN=mean, na.rm=TRUE)
head(weekend.average.steps.per.interval)
weekday.steps <- imputed.activity.data[imputed.activity.data$week.segment=="Weekday",]
weekday.average.steps.per.interval <- aggregate(weekday.steps$steps, by=list(weekday.steps$interval), FUN=mean, na.rm=TRUE)
plot(weekend.steps[,1], weekend.steps[,2], ylab="average steps taken", xlab="Interval", main="Weekend", type="l")
head(weekend.steps[,1])
head(weekend.steps)
head(weekend.average.steps.per.interval)
plot(weekend.average.steps.per.interval[,1], weekend.average.steps.per.interval[,2], ylab="average steps taken", xlab="Interval", main="Weekend", type="l")
par(mfrow=c(2,1))
plot(weekend.average.steps.per.interval[,1], weekend.average.steps.per.interval[,2], ylab="average steps taken", xlab="Interval", main="Weekend", type="l")
plot(weekend.average.steps.per.interval[,1], weekend.average.steps.per.interval[,2], ylab="average steps taken", xlab="Interval", main="Weekend", type="l")
par(mfrow=c(2,1))
plot(weekend.average.steps.per.interval[,1], weekend.average.steps.per.interval[,2], ylab="average steps taken", xlab="Interval", main="Weekend", type="l")
plot(weekday.average.steps.per.interval[,1], weekday.average.steps.per.interval[,2], ylab="average steps taken", xlab="Interval", main="Weekday", type="l")
```
plot(total.steps.per.day[,1], total.steps.per.day[,2], ylab="average steps taken", xlab="Interval", main="Average Daily Activity Pattern", type="l")
